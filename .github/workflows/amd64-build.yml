name: omniedge amd64 compile

on:
  push:
    tags:
      - "*"
  workflow_dispatch:
    inputs:
      envName:
        description: env of the action
        default: dev
        required: true

jobs:
  create-release:
    name: create-release
    runs-on: ubuntu-latest
    env:
      ENVIRONMENT: ${{ github.event.inputs.envName || 'dev' }}
    outputs:
      release_tag: ${{ steps.assemble_artifact.outputs.release_tag }}
    steps:
      - name: Assemble Artifact
        id: assemble_artifact
        env:
          TZ: Asia/Shanghai
        run: |
          if [[ '${{ github.ref_type }}' == 'tag' ]]; then 
            echo "::set-output name=release_tag::${{github.ref_name}}"
          else
            time=$(date +%Y%m%d%H)
            release_tag="$time-${{ env.ENVIRONMENT }}"
            echo "::set-output name=release_tag::$release_tag"
          fi 

  build:
    name: Build on ${{ matrix.os }}
    env:
      ENVIRONMENT: ${{ github.event.inputs.envName || 'dev' }}
    strategy:
      matrix:
        os: [ ubuntu-18.04,ubuntu-20.04 ]
    runs-on: ${{ matrix.os }}
    needs: create-release
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: |
          echo ""

      - name: setup env to prod if tag is not empty
        if: ${{ github.ref_type == 'tag' }}
        run: |
          echo "ENVIRONMENT=prod" >> $GITHUB_ENV

      - name: setup env if input env is not empty
        if: ${{ github.event.inputs.env }}
        run: |
          echo "ENVIRONMENT=${{ github.event.inputs.env }}" >> $GITHUB_ENV

      - name: Checkout without tag
        if: ${{ !github.event.release.tag_name }}
        uses: actions/checkout@master

      - name: Checkout with tag
        uses: actions/checkout@master
        if: ${{ github.event.release.tag_name }}
        with:
          ref: ${{ github.event.release.tag_name }}

      - name: Show CPU Model and Free Space
        run: |
          echo -e "Total CPU cores\t: $(nproc)"
          cat /proc/cpuinfo | grep 'model name'
          free -h
      - name: Show system info
        run: |
          echo -e "system info: $(uname -a)"

      - name: setup golang
        uses: actions/setup-go@v2
        with:
          go-version: '^1.13.1'

      - name: go mod download
        run: |
          go mod download

      - name: make
        run: |
          sudo -E apt-get -y update
          sudo -E apt-get install -y openssl
          sudo -E apt-get install -y build-essential
          sudo -E apt-get install -y libssl-dev
          sudo -E apt-get install -y zip
          make generate
          BUILD_ENV=${{ env.ENVIRONMENT }} make build
          zip -j ./omniedgecli-${{ matrix.os }}.zip ./out/omniedge

      - name: setup prerelease
        run: |
          if [[ '${{ github.ref_type }}' == 'tag' ]]; then
            echo "PRE_RELEASE=false" >> $GITHUB_ENV
          else
            echo "PRE_RELEASE=true" >> $GITHUB_ENV
          fi

      - name: Upload Release Asset
        id: upload-release-asset
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token:  ${{ secrets.GIT_HUB_TOKEN }}
          file: ./omniedgecli-${{ matrix.os }}.zip
          asset_name: omniedgecli-${{ matrix.os }}.zip
          overwrite: true
          tag: ${{ needs.create-release.outputs.release_tag }}
          prerelease: ${{ env.PRE_RELEASE }}