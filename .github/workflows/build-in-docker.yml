name: omniedge docker cross build

on:
  workflow_dispatch:
    inputs:
      env:
        description: env of the action
        default: prod
        required: false
      tag:
        description: tag ( if tag is not empty, env is always prod)
        required: false

jobs:
  build:
    name: Docker cross build
    env:
      ENVIRONMENT: ${{ github.event.inputs.env || 'dev' }}
      TAG: ${{ github.event.inputs.tag }}
    strategy:
      matrix:
        platform: [ arm64v8,armv7,ppc64le ]
    runs-on: ubuntu-latest
    steps:
      - name: setup env to prod if tag is not empty
        if: ${{ env.TAG }}
        run: |
          echo "ENVIRONMENT=prod" >> $GITHUB_ENV

      - name: Checkout without tag
        if: ${{ !env.TAG }}
        uses: actions/checkout@master

      - name: Checkout with tag
        uses: actions/checkout@master
        if: ${{ env.TAG }}
        with:
          ref: ${{ env.TAG }}

      - name: Show CPU Model and Free Space
        run: |
          echo -e "Total CPU cores\t: $(nproc)"
          cat /proc/cpuinfo | grep 'model name'
          free -h

      - name: Show system info
        run: |
          echo -e "system info: $(uname -a)"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache
        uses: actions/cache@v2
        env:
          cache-name: omniedge-saas-cli-${{ matrix.platform }}
        with:
          path: |
            /tmp/.buildx-cache
          key: ${{ matrix.os }}-build-${{ env.cache-name }}
          restore-keys: |
            ${{ matrix.os }}-build-${{ env.cache-name }}

      - name: dockerx platform
        run: |
          case ${{ matrix.platform }} in
            arm64v8)
            echo "DOCKER_PLATFORM=linux/arm64" >> $GITHUB_ENV
            ;;
            armv7)
            echo "DOCKER_PLATFORM=linux/arm/v7" >> $GITHUB_ENV
            ;;
            ppc64le)
            echo "DOCKER_PLATFORM=linux/ppc64le" >> $GITHUB_ENV
            ;;
          esac

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          platforms: ${{ env.DOCKER_PLATFORM }}
          push: false
          load: true
          file: docker/Dockerfile-ubuntu-${{ matrix.platform }}
          build-args: |
            BUILD_ENV=${{ env.ENVIRONMENT }}
          tags: cli:0.1
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: run binfmt
        run: |
          docker run --privileged --rm tonistiigi/binfmt --install all

      - name: run cli
        run: |
          docker run --name omniedge -t -d cli:0.1
      - name: copy file
        run: |
          docker cp omniedge:/app/out/omniedge .
      - name: zip
        run: |
          zip -j ./omniedgecli-${{ matrix.platform }}.zip ./omniedge

      - name: setup prerelease
        run: |
          if [[ '${{ github.ref_type }}' == 'tag' ]]; then
            echo "PRE_RELEASE=false" >> $GITHUB_ENV
          else
            echo "PRE_RELEASE=true" >> $GITHUB_ENV
          fi

      - name: Release
        uses: softprops/action-gh-release@v1
        if: ${{ env.TAG }}
        with:
          token: ${{ secrets.GIT_HUB_TOKEN}}
          files: omniedgecli-${{ matrix.platform }}.zip
          tag_name: ${{ env.TAG }}